<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SILENT</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-04-28T21:00:00.000Z</updated>
  <id>/</id>
  
  <author>
    <name>Shen Xi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySql基础语法</title>
    <link href="/2019/04/27/MySql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>/2019/04/27/MySql基础语法/</id>
    <published>2019-04-26T16:41:44.000Z</published>
    <updated>2019-04-28T21:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><h3 id="1-定义基本表"><a href="#1-定义基本表" class="headerlink" title="1. 定义基本表"></a>1. 定义基本表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREAT TABLE &lt;表名&gt;</span><br><span class="line">(&lt;列名1&gt; &lt;数据类型&gt; [NOT NULL] [UNIQUE]</span><br><span class="line">[,&lt;列名2&gt; &lt;数据类型&gt; [NOT NULL] [UNIQUE]]...);</span><br></pre></td></tr></table></figure><p>主要数据类型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">半字长二进制整数。</td></tr><tr><td style="text-align:center">INTEGER 或 INT</td><td style="text-align:center">全字长二进制整数。</td></tr><tr><td style="text-align:center">DECIMAL(p[,q])或DEC(p[,q])</td><td style="text-align:center">压缩十进制数，共p位，其中小数点后有q位。0&lt;=q&lt;=p&lt;=15,q=0时可以省略。</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">双字长浮点数。</td></tr><tr><td style="text-align:center">CHARTER(n)或CHAR(n)</td><td style="text-align:center">长度为n的定长字符串。</td></tr><tr><td style="text-align:center">VARCHAR(n)</td><td style="text-align:center">最大长度为n的变长字符串。</td></tr><tr><td style="text-align:center">DATE</td><td style="text-align:center">日期型，格式为YYYY-MM-DD。</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">时间型，格式为HH.MM.SS.XX。</td></tr></tbody></table><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREAT TABLE&lt;Student&gt;</span><br><span class="line">(Sno CHAR(8) NOT NULL UNIQUE,//不为空且唯一</span><br><span class="line"> Sname CHAR(20),</span><br><span class="line"> Ssex CHAR(2),</span><br><span class="line"> Sage INT,</span><br><span class="line"> Sdept CHAR(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-修改基本表"><a href="#2-修改基本表" class="headerlink" title="2. 修改基本表"></a>2. 修改基本表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt;</span><br><span class="line">[<span class="keyword">ADD</span> &lt;新列名&gt; &lt;数据类型&gt;]</span><br><span class="line">[<span class="keyword">MODIFY</span> &lt;列名&gt; &lt;数据类型&gt;];</span><br></pre></td></tr></table></figure><blockquote><p>ADD子句用于增加新列，MODIFY子句用于修改原有定义</p></blockquote><h3 id="3-删除基本表"><a href="#3-删除基本表" class="headerlink" title="3. 删除基本表"></a>3. 删除基本表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><h3 id="4-视图"><a href="#4-视图" class="headerlink" title="4. 视图"></a>4. 视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span></span><br><span class="line">&lt;视图名&gt; [(&lt;列名&gt; [,&lt;列名&gt;]...)] <span class="keyword">AS</span> &lt;子查询&gt;</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span> ];</span><br></pre></td></tr></table></figure><blockquote><ol><li>子查询中可以是任意复杂的SELECT语句，但通常不允许含有ORDER BY和DISTINCT。</li><li>WITH CHECK OPTION表示对视图进行UPDATE，INSERT和DELETE操作时要保证更新、插入、删除的行满足视图定义中的 子查询的条件表达式。</li><li>如果CREATE VIEW语句仅指定了视图名，省略了组成视图的各个属性列名，则隐含 该视图由子查询中的SELECT子句目标列中的诸字段组成。</li></ol></blockquote><h3 id="5-删除视图"><a href="#5-删除视图" class="headerlink" title="5. 删除视图"></a>5. 删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> &lt;视图名&gt;;</span><br></pre></td></tr></table></figure><h3 id="6-索引"><a href="#6-索引" class="headerlink" title="6. 索引"></a>6. 索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> &lt;索引名&gt;</span><br><span class="line"><span class="keyword">ON</span> &lt;表名&gt;(&lt;列名<span class="number">1</span>&gt; [&lt;次序&gt;] [,&lt;列名<span class="number">2</span>&gt; [&lt;次序&gt;]]...);</span><br></pre></td></tr></table></figure><blockquote><ol><li>索引可以建在该表的一列或多列上；&lt;次序&gt;包括ASC升序和DESC降序两种，省却值为ASC。</li><li>UNIQUE表示此索引的每一个索引值只对应唯一数据记录。</li></ol></blockquote><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> Scno <span class="keyword">ON</span> SC(Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>);</span><br><span class="line">//为选课表SC 按学号升序和课程号降序建唯一索引。</span><br></pre></td></tr></table></figure><h3 id="7-删除索引"><a href="#7-删除索引" class="headerlink" title="7. 删除索引"></a>7. 删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> &lt;索引名&gt;;</span><br></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><p>核心语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] &lt;目标表达式&gt; [,&lt;目标表达式&gt;]...</span><br><span class="line"><span class="keyword">FROM</span> &lt;表名或视图名&gt; [,&lt;表名或视图名&gt;]...</span><br><span class="line">[<span class="keyword">WHERE</span> &lt;条件表达式&gt;]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;列名<span class="number">1</span>&gt; [<span class="keyword">HAVING</span> &lt;条件表达式&gt;]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;列名<span class="number">2</span>&gt; [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><h3 id="1-单表简单查询"><a href="#1-单表简单查询" class="headerlink" title="1. 单表简单查询"></a>1. 单表简单查询</h3><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Sno , Sname FROM Student;//查询全体学生的学号、姓名</span><br><span class="line">SELECT * FROM Student;//查询全体学生的详细记录</span><br><span class="line">SELECT Sname , 2018-Sage FROM Student;//查询全体学生的姓名、出生年份</span><br></pre></td></tr></table></figure><h3 id="2-单表条件查询"><a href="#2-单表条件查询" class="headerlink" title="2. 单表条件查询"></a>2. 单表条件查询</h3><p>通过<code>WHERE</code>实现，使用<code>DISTINCT</code>消除重复行。</p><h4 id="1-比较大小"><a href="#1-比较大小" class="headerlink" title="1. 比较大小"></a>1. 比较大小</h4><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">描述</th><th style="text-align:center">符号</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center">等于</td><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小于</td><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center">小于等于</td><td style="text-align:center"><code>!=</code>  或  <code>&lt;&gt;</code></td><td style="text-align:center">不等于</td></tr></tbody></table><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept = <span class="string">'CS'</span>;</span><br><span class="line">//查询所有CS专业的学生的名字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Grade&lt;<span class="number">60</span>;</span><br><span class="line">//查询所有不及格的学生的学号</span><br></pre></td></tr></table></figure><h4 id="2-确定范围"><a href="#2-确定范围" class="headerlink" title="2. 确定范围"></a>2. 确定范围</h4><p>使用<code>BETWEEN...AND...</code>  和<code>NOT BETWEEN...AND...</code> 来查找指定范围的元组。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname , Sdept , Sage <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><h4 id="3-确定集合"><a href="#3-确定集合" class="headerlink" title="3. 确定集合"></a>3. 确定集合</h4><p>使用<code>IN</code>来查找指定范围的元组。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname , Ssex <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">'IS'</span>,<span class="string">'MA'</span>,<span class="string">'CS'</span>);</span><br></pre></td></tr></table></figure><h4 id="4-字符匹配"><a href="#4-字符匹配" class="headerlink" title="4. 字符匹配"></a>4. 字符匹配</h4><p>使用<code>LIKE</code>来查找指定范围的元组。</p><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NOT] LIKE '&lt;匹配串&gt;'</span><br></pre></td></tr></table></figure><p><code>&lt;匹配串&gt;</code>可以是一个完整的 字符串，也可以含有通配符<code>%</code>和<code>_</code>。</p><p><code>%</code>代表任意长度的字符串。</p><p><code>_</code>代表任意单个字符。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname , Sno <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">'_阳%'</span>;</span><br></pre></td></tr></table></figure><h4 id="5-涉及空值的查询"><a href="#5-涉及空值的查询" class="headerlink" title="5. 涉及空值的查询"></a>5. 涉及空值的查询</h4><p>使用<code>IS NULL</code>和 <code>IS NOT NULL</code>来查询空值和非空值。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno , Cno <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">//查询缺少成绩的学生的学号和相应的课程号</span><br></pre></td></tr></table></figure><h4 id="6-多重条件查询"><a href="#6-多重条件查询" class="headerlink" title="6. 多重条件查询"></a>6. 多重条件查询</h4><p>使用<code>AND</code>和 <code>OR</code>来联结多个查询条件。<code>AND</code>的优先级高于<code>OR</code>，可以通过括号改变优先级。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept = <span class="string">'CS'</span> <span class="keyword">AND</span> Sage &lt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="3-对查询结果排序"><a href="#3-对查询结果排序" class="headerlink" title="3. 对查询结果排序"></a>3. 对查询结果排序</h3><p>使用<code>ORDER BY</code>可以指定一个或多个属性列的升序 <code>(ASC)</code>或降序 <code>(DESC)</code>重新排列查询结果，其中升序 <code>(ASC)</code>为省却值。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno , Grade <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno = <span class="string">'3'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="4-使用集函数"><a href="#4-使用集函数" class="headerlink" title="4. 使用集函数"></a>4. 使用集函数</h3><p>为了增强检索功能，SQL提供了许多集函数，主要有：</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>COUNT( [DISTINCT] * )</code></td><td style="text-align:center">统计元组个数</td></tr><tr><td style="text-align:center"><code>COUNT( [DISTINCT] &lt;列名&gt; )</code></td><td style="text-align:center">统计一列中值的个数</td></tr><tr><td style="text-align:center"><code>SUM([DISTINCT] &lt;列名&gt;)</code></td><td style="text-align:center">统计一列中值的总和(此列须为数值型)</td></tr><tr><td style="text-align:center"><code>AVG([DISTINCT] &lt;列名&gt;)</code></td><td style="text-align:center">统计一列中值的平均值(此列须为数值型)</td></tr><tr><td style="text-align:center"><code>MAX([DISTINCT] &lt;列名&gt;)</code></td><td style="text-align:center">求一列值中的最大值</td></tr><tr><td style="text-align:center"><code>MIN([DISTINCT] &lt;列名&gt;)</code></td><td style="text-align:center">求一列值中的最小值</td></tr></tbody></table><blockquote><p>如指定<code>DISTINCT</code>，则计算时要取消指定列中的重复值。</p></blockquote><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(Grade) <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Cno = <span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><h3 id="5-对查询结果分组"><a href="#5-对查询结果分组" class="headerlink" title="5. 对查询结果分组"></a>5. 对查询结果分组</h3><p>使用<code>GROUP BY</code>可以将查询结果的各行按一列或多列取值相等的原则进行分组。</p><p>分组的目的是为了细化==集函数==的作用对象。如果未分组，集函数将作用于整个查询结果；否则将作用于每一个组。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno , <span class="keyword">COUNT</span>(Sno) <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno;</span><br><span class="line">//查询各个课程号和相应的选课人数</span><br></pre></td></tr></table></figure><blockquote><p>还可以使用<code>HAVING</code>指定筛选条件。</p></blockquote><h3 id="6-连接查询"><a href="#6-连接查询" class="headerlink" title="6. 连接查询"></a>6. 连接查询</h3><p>涉及两个及以上表的查询时，称为连接查询。用来连接两个表的条件称为连接条件。</p><p>格式为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;表名1&gt;.]&lt;列名1&gt;&lt;比较运算符&gt;[&lt;表名2&gt;.]&lt;列名2&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当比较运算符为<code>=</code>时为==等值连接==。为其他运算符时为==非等值连接==。</p><p>如果列名唯一，则可省略表名前缀。</p></blockquote><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.* , SC.* <span class="keyword">FROM</span> Student , SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno;</span><br><span class="line">//查询所有学生和选修课程情况</span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno , Sname <span class="keyword">FROM</span> Student , SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno <span class="keyword">AND</span> SC = <span class="string">'2'</span> <span class="keyword">AND</span> SC.Grade &gt;= <span class="number">90</span>;</span><br><span class="line">//查询选修2号课程且成绩在90分以上的的所有学生</span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno , Sname , Course.Cname , SC.Grade</span><br><span class="line"><span class="keyword">FROM</span> Student , SC , Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno <span class="keyword">AND</span> SC.Sno = Course.Cno;</span><br><span class="line">//查询每个学生的选修的课程名及成绩</span><br></pre></td></tr></table></figure><h3 id="7-嵌套查询"><a href="#7-嵌套查询" class="headerlink" title="7. 嵌套查询"></a>7. 嵌套查询</h3><p>一个<code>SELECT-FROM-WHERE</code>语句称为一个查询块。将一个查询块嵌套在另一个查询块的<code>WHERE</code>或<code>HAVING</code>的条件中的查询称为嵌套查询或子查询。</p><h4 id="1-带IN的子查询"><a href="#1-带IN的子查询" class="headerlink" title="1. 带IN的子查询"></a>1. 带<code>IN</code>的子查询</h4><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno , Sname , Sdept <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sname = <span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><h4 id="2-带比较运算符的子查询"><a href="#2-带比较运算符的子查询" class="headerlink" title="2. 带比较运算符的子查询"></a>2. 带比较运算符的子查询</h4><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno , Sname , Sdept <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept =</span><br><span class="line">(<span class="keyword">SELECT</span> Sdept <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sname = <span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><h4 id="3-带EXISTS的子查询"><a href="#3-带EXISTS的子查询" class="headerlink" title="3. 带EXISTS的子查询"></a>3. 带<code>EXISTS</code>的子查询</h4><p>带有<code>EXISTS</code>的子查询不返回任何实际数据，它只产生<code>&quot;TRUE&quot;</code>或 <code>&quot;FALSE&quot;</code>。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno = Student.Sno <span class="keyword">AND</span> Cno = <span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><h4 id="4-查询视图"><a href="#4-查询视图" class="headerlink" title="4. 查询视图"></a>4. 查询视图</h4><p>视图的查询本质上是对基本表的查询。</p><p>系统会将视图查询转换为等价的基本表的查询然后再执行查询。</p><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><p>数据更新包括 插入、修改和删除。</p><h3 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1. 插入数据"></a>1. 插入数据</h3><ol><li><p>插入单个元组</p><p>语句格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (&lt;属性列<span class="number">1</span>&gt; [,&lt;属性列<span class="number">2</span>&gt;...])</span><br><span class="line"><span class="keyword">VALUES</span> (&lt;常量<span class="number">1</span>&gt; [,&lt;常量<span class="number">2</span>&gt;]...);</span><br></pre></td></tr></table></figure><p>如果<code>INTO</code>子句没有指定属性列，则插入记录必须每个属性列上均有值。</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'20040020'</span>,<span class="string">'张三'</span>,<span class="string">'男'</span>,<span class="number">18</span>,<span class="string">'IS'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student (Sno,Cno)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'20040020'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure></li><li><p>插入子查询结果</p><p>语句格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (&lt;属性列<span class="number">1</span>&gt; [,&lt;属性列<span class="number">2</span>&gt;...]) 子查询;</span><br></pre></td></tr></table></figure><p>其功能是批量插入，一次性将子查询的结果全部插入到指定表中。</p></li></ol><h3 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2. 修改数据"></a>2. 修改数据</h3><p>修改数据的语句一般格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt;</span><br><span class="line"><span class="keyword">SET</span> &lt;列名&gt; &lt;表达式&gt; [,&lt;列名&gt; = &lt;表达式&gt;]...</span><br><span class="line">[<span class="keyword">WHERE</span> &lt;条件&gt;];</span><br></pre></td></tr></table></figure><ol><li><p>修改元组的值</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student <span class="keyword">SET</span> Sage = <span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno = <span class="string">'20040001'</span>;</span><br></pre></td></tr></table></figure></li><li><p>带子查询的修改语句</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SC <span class="keyword">SET</span> Grade = <span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">'CS'</span> = </span><br><span class="line">(<span class="keyword">SELECT</span> Sdept <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Student.Sno = SC.Sno);</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h3><p>删除语句一般格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt; [<span class="keyword">WHERE</span> &lt;条件&gt;];</span><br></pre></td></tr></table></figure><p>若省略<code>WHERE</code>，则删除该表所有数据。</p><ol><li><p>删除元组的值</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sno = <span class="string">'20040019'</span>;</span><br></pre></td></tr></table></figure></li><li><p>带子查询的删除语句</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">'CS'</span> = (SELETE Sdept <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno = SC.Sno)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据定义&quot;&gt;&lt;a href=&quot;#数据定义&quot; class=&quot;headerlink&quot; title=&quot;数据定义&quot;&gt;&lt;/a&gt;数据定义&lt;/h2&gt;&lt;h3 id=&quot;1-定义基本表&quot;&gt;&lt;a href=&quot;#1-定义基本表&quot; class=&quot;headerlink&quot; title=&quot;1. 
      
    
    </summary>
    
      <category term="基础" scheme="/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="MySql" scheme="/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>springboot登陆实现</title>
    <link href="/2019/04/27/springboot%E7%99%BB%E9%99%86%E5%AE%9E%E7%8E%B0/"/>
    <id>/2019/04/27/springboot登陆实现/</id>
    <published>2019-04-26T16:40:00.000Z</published>
    <updated>2019-04-28T21:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot登陆实现"><a href="#springboot登陆实现" class="headerlink" title="springboot登陆实现"></a>springboot登陆实现</h1><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="一、-session简介"><a href="#一、-session简介" class="headerlink" title="一、 session简介"></a>一、 session简介</h3><p>服务器可以为每个用户浏览器创建一个会话对象（session对象），一个浏览器只能产生一个session，当新建一个窗口访问服务器时，还是原来的那个session。session中默认保存的是当前用户的信息。因此，在需要保存其他用户数据时，我们可以自己给session添加属性。session（会话）可以看为是一种标识，通过带session的请求，可以让服务器知道是谁在请求数据。</p><h3 id="二、-session相关"><a href="#二、-session相关" class="headerlink" title="二、 session相关"></a>二、 session相关</h3><ol><li><p>session的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>（<span class="string">"demo"</span>）</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">HttpSession sessoin=request.getSession();<span class="comment">//这就是session的创建</span></span><br><span class="line">session.setAttribute(<span class="string">"username"</span>,<span class="string">"root"</span>);<span class="comment">//给session添加属性属性name： username,属性 value：root</span></span><br><span class="line">session.setAttribute(<span class="string">"password"</span>,<span class="string">"123456"</span>);<span class="comment">//添加属性 name: password; value: 123456</span></span><br><span class="line">System.out.println(session.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>HttpSession session=request.getSession(true);</code> true表示如果这个HTTP请求中,有<code>session</code>，那么可以直接通过<code>getSession</code>获取当前的<code>session</code>，如果当前的请求中没有<code>session</code>，则会自动新建一个<code>session</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session=request.getSession(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//false表示只能获取当前请求中的session，如果没有也不能自动创建。</span></span><br></pre></td></tr></table></figure></li><li><p>session的 获取属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">session.getAttribute(<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure></li><li><p>session，cookies的超时设置</p><ol><li><p>在.yml里面或.xml配置文件里面设置</p></li><li><p>在创建session时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.setMaxInactiveInterval(<span class="number">30</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">//以秒为单位，即在没有活动30分钟后，session将失效</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="三、获取Request和Response的方法"><a href="#三、获取Request和Response的方法" class="headerlink" title="三、获取Request和Response的方法"></a>三、获取Request和Response的方法</h3><ul><li><p>通过参数直接获取，只要在你的方法上加上参数，Springboot就会帮你绑定，你可以直接使用。如果你的方法有其他参数，把这两个加到后面即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">center</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注入到类，这样就不用每个方法都写了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">center</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实现登陆跳转的两种方法"><a href="#实现登陆跳转的两种方法" class="headerlink" title="实现登陆跳转的两种方法"></a>实现登陆跳转的两种方法</h2><ol><li>form表单提交，后台验证并跳转。</li><li>js提交，后台验证后交予js跳转。</li></ol><h2 id="后台跳转方式"><a href="#后台跳转方式" class="headerlink" title="后台跳转方式"></a>后台跳转方式</h2><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"htmleaf-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginform"</span> <span class="attr">class</span>=<span class="string">"form"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/test&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"post"</span>  <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>  <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-actions"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">"submit"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"javascript:$('#loginform').submit();"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery-1.11.2.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后台处理"><a href="#后台处理" class="headerlink" title="后台处理"></a>后台处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">CategoryMapper categoryMapper;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletRequest request, ModelMap map)</span> </span>&#123;</span><br><span class="line">HttpSession sessoin = request.getSession();</span><br><span class="line"><span class="keyword">if</span> (sessoin.getAttribute(<span class="string">"username"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">map.addAttribute(<span class="string">"host"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">map.addAttribute(<span class="string">"user"</span>, <span class="string">"User: "</span> + sessoin.getAttribute(<span class="string">"username"</span>));</span><br><span class="line">map.addAttribute(<span class="string">"name"</span>, <span class="string">"Name: "</span> + sessoin.getAttribute(<span class="string">"name"</span>));</span><br><span class="line">map.addAttribute(<span class="string">"age"</span>, <span class="string">"Age: "</span> + sessoin.getAttribute(<span class="string">"age"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//若未登陆则直接跳转至登陆界面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">HttpSession sessoin = request.getSession();</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">boolean</span> check;</span><br><span class="line">Category test = categoryMapper.findByUsername(username);</span><br><span class="line"><span class="keyword">if</span> (test != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (test.getPassword().equals(password))</span><br><span class="line">check = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">check = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"用户不存在！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line">sessoin.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">sessoin.setAttribute(<span class="string">"password"</span>, password);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">request.setAttribute(<span class="string">"msg"</span>, <span class="string">"密码不正确！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://www.silentspeaker.xyz/upload/2019/3/0u13j12m9mia3qjnjvfg0gfod820190427004748982.png" alt></p><h2 id="js跳转方式"><a href="#js跳转方式" class="headerlink" title="js跳转方式"></a>js跳转方式</h2><h3 id="前台交互"><a href="#前台交互" class="headerlink" title="前台交互"></a>前台交互</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">//回车键或者点击提交表单,禁止浏览器默认跳转：</span></span><br><span class="line"><span class="undefined">$('#loginform').submit(function() &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">var name = document.getElementById('inputText').value;</span></span><br><span class="line"><span class="undefined">var pass = document.getElementById('inputPassword').value;</span></span><br><span class="line"><span class="undefined">var json = &#123;</span></span><br><span class="line"><span class="undefined">"username" : name,</span></span><br><span class="line"><span class="undefined">"password" : pass</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">var url = "/login";</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">$.post(url, &#123;</span></span><br><span class="line"><span class="undefined">"data" : JSON.stringify(json)</span></span><br><span class="line"><span class="undefined">&#125;, function(data) &#123;</span></span><br><span class="line"><span class="undefined">//alert(data);</span></span><br><span class="line"><span class="undefined">if (data === "0") &#123;location.href = "/";</span></span><br><span class="line"><span class="undefined">&#125; else if (data === "404") &#123;$("#msg").text("用户未找到！");</span></span><br><span class="line"><span class="undefined">&#125; else if (data === "error") &#123;$("#msg").text("密码错误！");</span></span><br><span class="line"><span class="undefined">&#125; else &#123;$("#msg").text("未知错误！");</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">return false;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后台处理-1"><a href="#后台处理-1" class="headerlink" title="后台处理"></a>后台处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, Category user, Model model)</span> </span>&#123;</span><br><span class="line">String data = request.getParameter(<span class="string">"data"</span>);</span><br><span class="line">System.out.println(<span class="string">"获取提交数据："</span> + data);</span><br><span class="line">YamlJsonParser json = <span class="keyword">new</span> YamlJsonParser();</span><br><span class="line">Map&lt;String, Object&gt; parser = json.parseMap(data);</span><br><span class="line">String username = parser.get(<span class="string">"username"</span>).toString();</span><br><span class="line">String password = parser.get(<span class="string">"password"</span>).toString();</span><br><span class="line">System.out.println(<span class="string">"转换为JSON对象："</span> + username + password);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> check;</span><br><span class="line">Category test = categoryMapper.findByUsername(username);</span><br><span class="line"><span class="keyword">if</span> (test != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (test.getPassword().equals(password))</span><br><span class="line">check = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">check = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(username + <span class="string">"用户不存在！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"404"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line">HttpSession sessoin = request.getSession();</span><br><span class="line">sessoin.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">sessoin.setAttribute(<span class="string">"password"</span>, password);</span><br><span class="line">sessoin.setAttribute(<span class="string">"name"</span>, test.getName());</span><br><span class="line">sessoin.setAttribute(<span class="string">"age"</span>, test.getAge());</span><br><span class="line">System.out.println(<span class="string">"登陆成功，跳转"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"密码不正确！"</span> + test.getPassword() + password);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://www.silentspeaker.xyz/upload/2019/3/qphje12apmi7rrcqv87l6789jj20190427004748989.png" alt></p><h2 id="方法比较"><a href="#方法比较" class="headerlink" title="方法比较"></a>方法比较</h2><p>​    使用第一种方法时，当后台程序有异常时会直接使返回页面异常，而使用前台跳转则无此问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot登陆实现&quot;&gt;&lt;a href=&quot;#springboot登陆实现&quot; class=&quot;headerlink&quot; title=&quot;springboot登陆实现&quot;&gt;&lt;/a&gt;springboot登陆实现&lt;/h1&gt;&lt;h2 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相
      
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SpringBoot" scheme="/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap的基础使用</title>
    <link href="/2019/04/27/Bootstrap%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>/2019/04/27/Bootstrap的基础使用/</id>
    <published>2019-04-26T16:39:32.000Z</published>
    <updated>2019-04-29T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap的基础使用"><a href="#Bootstrap的基础使用" class="headerlink" title="Bootstrap的基础使用"></a>Bootstrap的基础使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://getbootstrap.com/" target="_blank" rel="noopener">官网</a>、<a href="http://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap中文网</a></p><ul><li>基本结构：Bootstrap 提供了一个带有网格系统、链接样式、背景的基本结构。</li><li>CSS：全局的 CSS设置、定义基本的 HTML 元素样式、可扩展的 class，以及一个先进的网格系统。</li><li>组件：Bootstrap 包含了十几个可重用的组件，用于创建图像、下拉菜单、导航、警告框、弹出框等等。</li><li>JavaScript 插件：Bootstrap包含了十几个自定义的jQuery 插件。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="引入Bootstrap"><a href="#引入Bootstrap" class="headerlink" title="引入Bootstrap"></a>引入Bootstrap</h3><ol><li><p>下载源文件</p><p>已编译版本</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/06/compiledfilestructure.jpg"></p><p>源代码</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/06/sourcecodefilestructure.jpg"></p><ul><li><em>less/</em> 、<em>js/</em> 和 <em>fonts/</em> 下的文件分别是 Bootstrap CSS、JS 和图标字体的源代码。</li><li><em>dist/</em> 文件夹包含了上面预编译下载部分中所列的文件和文件夹。</li><li><em>docs-assets/</em>、<em>examples/</em> 和所有的 *<em>.html</em> 文件是 Bootstrap 文档。</li></ul></li></ol><ol start="2"><li><p>使用<a href="https://www.bootstrapcdn.com/" target="_blank" rel="noopener">BootstrapCDN</a>跳过下载，将Bootstrap编译的CSS和JS的缓存版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要使用编译的JavaScript，还要先导入jQuery和Popper.js的CDN版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.3.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="组件样式"><a href="#组件样式" class="headerlink" title="组件样式"></a>组件样式</h3><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">名称</th><th style="text-align:center">类名</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center">Typography</td><td style="text-align:center"><a href="https://www.imooc.com/code/2268" target="_blank" rel="noopener">排版</a></td><td style="text-align:center">Table</td><td style="text-align:center"><a href="https://www.imooc.com/code/2290" target="_blank" rel="noopener">表格</a></td></tr><tr><td style="text-align:center">Form</td><td style="text-align:center"><a href="https://www.imooc.com/code/2341" target="_blank" rel="noopener">表单</a></td><td style="text-align:center">Button</td><td style="text-align:center"><a href="https://www.imooc.com/code/2364" target="_blank" rel="noopener">按钮</a></td></tr><tr><td style="text-align:center">Dropdown</td><td style="text-align:center"><a href="https://www.imooc.com/code/2881" target="_blank" rel="noopener">下拉菜单</a></td><td style="text-align:center">Button Group</td><td style="text-align:center"><a href="https://www.imooc.com/code/2953" target="_blank" rel="noopener">按钮组</a></td></tr><tr><td style="text-align:center">Input Group</td><td style="text-align:center"><a href="https://www.imooc.com/code/2345" target="_blank" rel="noopener">输入框</a></td><td style="text-align:center">Navbar</td><td style="text-align:center"><a href="https://www.imooc.com/code/3110" target="_blank" rel="noopener">导航条</a></td></tr><tr><td style="text-align:center">Pagination</td><td style="text-align:center"><a href="https://www.imooc.com/code/3185" target="_blank" rel="noopener">分页导航</a></td><td style="text-align:center">Tag</td><td style="text-align:center"><a href="http://www.runoob.com/bootstrap/bootstrap-tab-plugin.html" target="_blank" rel="noopener">标签插件</a></td></tr></tbody></table><p>· · ·</p><p>链接引入<a href="https://www.imooc.com/learn/141" target="_blank" rel="noopener">慕课网</a>、<a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>。</p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>个人理解的Bootstrap是一些已经定义好的美观的css样式，通过添加class类名来使用。网格系统可以适配不同屏幕的阅读。使用本地版需要下载。使用CDN版无需下载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bootstrap的基础使用&quot;&gt;&lt;a href=&quot;#Bootstrap的基础使用&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap的基础使用&quot;&gt;&lt;/a&gt;Bootstrap的基础使用&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot;
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Security 实现用户登陆</title>
    <link href="/2019/03/06/Spring-Security-%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/"/>
    <id>/2019/03/06/Spring-Security-实现用户登陆/</id>
    <published>2019-03-06T14:40:25.000Z</published>
    <updated>2019-03-06T14:41:00.072Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅介绍Spring Security的基本使用。</p><h2 id="Spring-Security简介"><a href="#Spring-Security简介" class="headerlink" title="Spring Security简介"></a>Spring Security简介</h2><p>Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。</p><ul><li>认证（Authentication）：“认证”是建立主体（principal）的过程。“主体”通常是指可以在您的应用程序中执行操作的用户、设备或其他系统。</li><li>授权（Authorization）：或称为“访问控制（Access-control）”，“授权”是指决定是否允许主体在应用程序中执行操作。</li></ul><p>身份验证技术主要有：</p><table><thead><tr><th style="text-align:center">身份验证</th><th style="text-align:center">. . .</th></tr></thead><tbody><tr><td style="text-align:center"><code>HTTP BASIC</code></td><td style="text-align:center">单点登陆</td></tr><tr><td style="text-align:center"><code>HTTP Digest</code></td><td style="text-align:center"><code>Remember-Me</code></td></tr><tr><td style="text-align:center"><code>HTTP X.509</code></td><td style="text-align:center">匿名身份验证</td></tr><tr><td style="text-align:center"><code>LDAP</code></td><td style="text-align:center"><code>Run-as</code></td></tr><tr><td style="text-align:center">基于表单的认证</td><td style="text-align:center"><code>JAAS</code></td></tr><tr><td style="text-align:center"><code>OpenID</code></td><td style="text-align:center"><code>JavaEE</code>容器认证</td></tr></tbody></table><h2 id="Spring-Security-配置"><a href="#Spring-Security-配置" class="headerlink" title="Spring Security 配置"></a>Spring Security 配置</h2><p><a href="https://github.com/SilentSpeaker/security-application" target="_blank" rel="noopener">完整工程</a></p><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>关键代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    //SpringBoot必要组件和测试组件</span><br><span class="line">implementation('org.springframework.boot:spring-boot-starter-web')</span><br><span class="line">testImplementation('org.springframework.boot:spring-boot-starter-test')</span><br><span class="line">//thymeleaf 模板引擎</span><br><span class="line">compile('org.springframework.boot:spring-boot-starter-thymeleaf')</span><br><span class="line">//Spring Data JPA 持久层支持</span><br><span class="line">compile('org.springframework.boot:spring-boot-starter-data-jpa')</span><br><span class="line">//Mysql 连接驱动</span><br><span class="line">compile('mysql:mysql-connector-java:8.0.11')</span><br><span class="line">//H2 内存数据库</span><br><span class="line">runtime('com.h2database:h2:1.4.193')</span><br><span class="line">//Spring Security 权限管理</span><br><span class="line">compile('org.springframework.boot:spring-boot-starter-security')</span><br><span class="line">//Thymeleaf Spring Security 对Thymeleaf的支持</span><br><span class="line">compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.2.RELEASE')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：<a href="https://github.com/SilentSpeaker/security-application/blob/master/build.gradle" target="_blank" rel="noopener">HERE</a></p><h3 id="SecurityConfig-java"><a href="#SecurityConfig-java" class="headerlink" title="SecurityConfig.java"></a>SecurityConfig.java</h3><p>SecurityConfig.java为配置类，继承自<code>org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</code>类。</p><p>用于自定义一些配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义权限配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">http.authorizeRequests().antMatchers(<span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>, <span class="string">"/fonts/**"</span>, <span class="string">"/index"</span>).permitAll()<span class="comment">// 都可以访问</span></span><br><span class="line">.antMatchers(<span class="string">"/users/**"</span>).hasRole(<span class="string">"ADMIN"</span>)<span class="comment">// 需要相应角色权限才能访问</span></span><br><span class="line">.and().formLogin()<span class="comment">// 基于Form表单验证</span></span><br><span class="line">.loginPage(<span class="string">"/login"</span>).failureUrl(<span class="string">"/login-error"</span>);<span class="comment">// 自定义登陆界面</span></span><br><span class="line">http.csrf().disable();<span class="comment">// 禁用security的csrf功能</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户认证</span></span><br><span class="line"><span class="comment"> * 添加用户名为admin密码为12345的ADMIN权限用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">auth.inMemoryAuthentication()<span class="comment">// 认证信息储存在内存中</span></span><br><span class="line">.withUser(<span class="string">"admin"</span>).password(<span class="string">"12345"</span>).roles(<span class="string">"ADMIN"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="1">这里</span>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable();<span class="comment">// 禁用security的csrf功能</span></span><br></pre></td></tr></table></figure><p>这句是为了使<code>RESTful</code>正常使用。</p><p>这里设定了<code>/css/**</code>、<code>/js/**</code>、<code>/fonts/**</code>、<code>/index</code>是都可以访问且不涉及权限的，但需要<code>ADMIN</code>账户才能访问。且登陆基于<code>Form</code>表单验证，登陆界面和登陆错误返回页面分别为<code>/login</code>、<code>/login-error</code>。</p><p>并将账号信息注入到内存中，即用户名为<code>admin</code>密码为<code>12345</code>的<code>ADMIN</code>权限用户，此例未将账号信息存储到持久层内。</p><h3 id="MainController-java"><a href="#MainController-java" class="headerlink" title="MainController.java"></a>MainController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/login-error"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginError</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"loginError"</span>,<span class="keyword">true</span>);</span><br><span class="line">model.addAttribute(<span class="string">"errorMsg"</span>, <span class="string">"登陆失败，用户名或密码错误！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：<a href="https://github.com/SilentSpeaker/security-application/blob/master/src/main/java/com/example/demo/controller/MainController.java" target="_blank" rel="noopener">HERE</a></p><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><h4 id="fragments部分"><a href="#fragments部分" class="headerlink" title="fragments部分"></a><a href="https://github.com/SilentSpeaker/security-application/tree/master/src/main/resources/templates/fragments" target="_blank" rel="noopener">fragments部分</a></h4><p><code>header.html</code>会根据用户是否登陆显示不同的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 登陆判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:doPost()"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-success"</span>&gt;</span>退出<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAnonymous()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;~/login&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-success"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>footer.html</code>将<code>javascript:doPost()</code>函数也根据用户是否登陆显示出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function doPost() &#123;  // 登出函数</span></span><br><span class="line"><span class="undefined">var myForm = document.createElement("form");     </span></span><br><span class="line"><span class="undefined">myForm.method = "post";</span></span><br><span class="line"><span class="undefined">myForm.action = "/logout";    </span></span><br><span class="line"><span class="undefined">document.body.appendChild(myForm);   </span></span><br><span class="line"><span class="undefined">myForm.submit(); </span></span><br><span class="line"><span class="undefined">document.body.removeChild(myForm);  // 提交后移除创建的form</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处用JavaScript创建一个表单，要想正常工作须在<a href="#1">前面</a>配置文件初加上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable();<span class="comment">// 禁用security的csrf功能</span></span><br></pre></td></tr></table></figure><p>来禁用security的csrf功能。</p><h4 id="templates模板"><a href="#templates模板" class="headerlink" title="templates模板"></a><a href="https://github.com/SilentSpeaker/security-application/tree/master/src/main/resources/templates" target="_blank" rel="noopener">templates模板</a></h4><p><code>index.html</code>根据用户是否登陆显示不同的页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;fragments/header::header&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>已有用户登陆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">登陆的用户为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">用户角色为：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAnonymous()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>未有用户登陆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;fragments/footer::footer&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>login.html</code>则是根据一个<code>form</code>表单来提交账号密码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/thymeleaf/layout"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;fragments/header::header&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Page content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;~/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-md-5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"col-form-label"</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxlength</span>=<span class="string">"50"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-md-5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"col-form-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxlength</span>=<span class="string">"30"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group col-md-5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;loginError&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"label-error"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;errorMsg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;fragments/footer::footer&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成后界面：</p><p>未有用户登陆时<br><img src="https://raw.githubusercontent.com/SilentSpeaker/security-application/master/src/main/resources/static/img/noUser.png" alt><br>登陆界面<br><img src="https://raw.githubusercontent.com/SilentSpeaker/security-application/master/src/main/resources/static/img/logining.png" alt><br>已有用户登陆<br><img src="https://raw.githubusercontent.com/SilentSpeaker/security-application/master/src/main/resources/static/img/hasUser.png" alt></p><p>完整项目地址：<a href="https://github.com/SilentSpeaker/security-application" target="_blank" rel="noopener">HRER</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文仅介绍Spring Security的基本使用。&lt;/p&gt;
&lt;h2 id=&quot;Spring-Security简介&quot;&gt;&lt;a href=&quot;#Spring-Security简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Security简介&quot;&gt;&lt;/a&gt;S
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Thymeleaf(基础)</title>
    <link href="/2019/03/06/Thymeleaf-%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/03/06/Thymeleaf-基础/</id>
    <published>2019-03-06T14:33:34.000Z</published>
    <updated>2019-03-06T14:34:35.638Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Thymeleaf简介：</strong></p><ul><li>Java模板引擎。</li><li>自然模板，原型即页面。</li><li>语法优雅易懂。</li><li>遵从Web标准</li></ul><hr><p><strong>显著特征：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">data-th-text</span>=<span class="string">"..."</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="标准表达式"><a href="#标准表达式" class="headerlink" title="标准表达式"></a>标准表达式</h2><h3 id="变量表达式"><a href="#变量表达式" class="headerlink" title="变量表达式"></a>变量表达式</h3><p>语法：<code>${...}</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;book.author.name&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="消息表达式"><a href="#消息表达式" class="headerlink" title="消息表达式"></a>消息表达式</h3><p>语法：<code>#{...}</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#&#123;header.address.city&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#&#123;header.address.country&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也称为==文本外部化==、国际化或i18n。</p></blockquote><h3 id="选择表达式"><a href="#选择表达式" class="headerlink" title="选择表达式"></a>选择表达式</h3><p>语法：<code>*{...}</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;book&#125;"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;title&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>与==变量表达式==的区别：他们是在==当前选择的对象==而不是在整个上下文变量映射上执行。</p></blockquote><h3 id="链接表达式"><a href="#链接表达式" class="headerlink" title="链接表达式"></a>链接表达式</h3><p>语法：<code>@{...}</code></p><ul><li>相对地址<code>&lt;a th:href=&quot;@{…/documents/report}&quot;&gt;...&lt;/a&gt;</code></li><li>与服务器相对<code>&lt;a th:href=&quot;@{~/contents/main}&quot;&gt;...&lt;/a&gt;</code></li><li>和协议相对<code>&lt;a th:href=&quot;@{//syatic.mycompany.com/res/initial}&quot;&gt;...&lt;/a&gt;</code></li><li>绝对地址<code>&lt;a th:href=&quot;@{http://www.mycompany.com/main}&quot;&gt;...&lt;/a&gt;</code></li></ul><h3 id="分段表达式"><a href="#分段表达式" class="headerlink" title="分段表达式"></a>分段表达式</h3><p>语法：<code>th:insert</code>或<code>th:replace</code></p><pre><code>定义`copy`</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">            &amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>引入`copy`</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer::copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ol><li><p>文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Now you are looking at a </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'working web application'"</span>&gt;</span></span><br><span class="line">        template file</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The year is <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2019"</span>&gt;</span>1492<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>In two years,it will be <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2019+2"</span>&gt;</span>1492<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>布尔</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.isAdmin()&#125;==false"</span>&gt;</span>...</span><br></pre></td></tr></table></figure></li><li><p>null</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;variable.something&#125;==null"</span>&gt;</span>...</span><br></pre></td></tr></table></figure></li></ol><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ol><li><p>运算 <code>+</code>、<code>-</code> 、<code>*</code> 、<code>/</code>、<code>%</code></p></li><li><p>比较<code>&gt;或gt</code> 、<code>&lt;或lt</code>、 <code>&gt;=或ge</code>、 <code>&lt;=或le</code></p></li><li><p>等价<code>==或eq</code> 、<code>!=或ne</code></p></li><li><p>条件运算符（三目运算符）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:class</span>=<span class="string">"$&#123;row.even&#125;?'even':'odd'"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>无操作<code>_</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;?:_"</span>&gt;</span>no user authenticated<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无操作时保留原文本。</p></li></ol><h2 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h2><h3 id="设置任意属性值"><a href="#设置任意属性值" class="headerlink" title="设置任意属性值"></a>设置任意属性值</h3><p>关键字：<code>th:attr</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:attr</span>=<span class="string">"action=@&#123;/subscribe&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieIdset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:attr</span>=<span class="string">"value=@&#123;subscribe.submit&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieIdset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果为<code>th:attr</code>设置的值会替换掉原有的值。</p><h3 id="设置值到指定的属性"><a href="#设置值到指定的属性" class="headerlink" title="设置值到指定的属性"></a>设置值到指定的属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/subscribe&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieIdset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:value</span>=<span class="string">"@&#123;subscribe.submit&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieIdset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="固定值布尔属性"><a href="#固定值布尔属性" class="headerlink" title="固定值布尔属性"></a>固定值布尔属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"chectbox"</span> <span class="attr">name</span>=<span class="string">"option2"</span> <span class="attr">checked</span>/&gt;</span><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"chectbox"</span> <span class="attr">name</span>=<span class="string">"option1"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span><span class="comment">&lt;!--xHTML--&gt;</span></span><br></pre></td></tr></table></figure><p>在Thymeleaf中可这样写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"chectbox"</span> <span class="attr">name</span>=<span class="string">"active"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;user.active&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>${user.active}</code>为布尔值。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="基本迭代"><a href="#基本迭代" class="headerlink" title="基本迭代"></a>基本迭代</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"book:$&#123;books&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;book.title&#125;"</span>&gt;</span></span><br><span class="line">    En las Orillas del Sar</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h3><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">描述</th><th style="text-align:center">关键字</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>index</code></td><td style="text-align:center">索引(从0开始)</td><td style="text-align:center"><code>count</code></td><td style="text-align:center">索引(从1开始)</td></tr><tr><td style="text-align:center"><code>size</code></td><td style="text-align:center">总数</td><td style="text-align:center"><code>current</code></td><td style="text-align:center">当前变量</td></tr><tr><td style="text-align:center"><code>even</code></td><td style="text-align:center">判断奇数</td><td style="text-align:center"><code>odd</code></td><td style="text-align:center">判断偶数</td></tr><tr><td style="text-align:center"><code>first</code></td><td style="text-align:center">判断第一个</td><td style="text-align:center"><code>last</code></td><td style="text-align:center">判断最后一个</td></tr></tbody></table><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li><p><code>th:if</code>、<code>th:unless</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comment.html"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">"@&#123;/product/commentsCprodId=$&#123;prod.id&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:if</span>=<span class="string">"$&#123;not #list.isEmpty(prod.comments)&#125;"</span>&gt;</span></span><br><span class="line">    view</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>th:unless</code>与<code>th:if</code>相反。</p></li><li><p><code>switch</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:swith</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h2><ol><li><p>定义和引用片段</p><p>定义<code>copy</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">            &amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入<code>copy</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer::copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不使用<code>th:fragment</code></p><p>定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"copy-section"</span>&gt;</span></span><br><span class="line">&amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer::#copy-section&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>th:insert</code>、<code>th:replace</code>、<code>th:include</code>之间的区别</p><ul><li><p><code>th:insert</code> 它将简单地插入指定的片段作为正文的主标签。</p></li><li><p><code>th:replace</code> 用指定实际片段来替换其主标签。</p></li><li><p><code>th:include</code> 类似于<code>th:insert</code>，但不是插入片段，它只是插入此片段的内容（3.x版本后不再推荐使用）</p><p>示例：</p><p>定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">    &amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer::copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer::copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer::copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染后的实际效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!--th:insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">            &amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="comment">&lt;!--th:replace--&gt;</span></span><br><span class="line">        &amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!--th:include--&gt;</span></span><br><span class="line">        &amp;copy;2019<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>csdn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h2><blockquote><p>即执行顺序。</p></blockquote><table><thead><tr><th style="text-align:center">Order</th><th style="text-align:center">Feature</th><th style="text-align:center">Attrbutes</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Fragment inclusion</td><td style="text-align:center"><code>th:insert</code><br><code>th:replace</code></td><td style="text-align:center">包含</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Fragment iteration</td><td style="text-align:center"><code>th:each</code></td><td style="text-align:center">迭代</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Conditional evalution</td><td style="text-align:center"><code>th:if</code><br><code>th:unless</code><br><code>th:switch</code><br><code>th:case</code></td><td style="text-align:center">条件判断</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Local variable definition</td><td style="text-align:center"><code>th:object</code><br><code>th:with</code></td><td style="text-align:center">本地变量</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">Gerneral attribute modification</td><td style="text-align:center"><code>th:attr</code><br><code>th:attrprepend</code><br><code>th:attrappend</code></td><td style="text-align:center">属性修改</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">Specific attribute modification</td><td style="text-align:center"><code>th:value</code><br><code>th:href</code><br><code>th:src</code><br>…</td><td style="text-align:center">特定属性修改</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">Text (tag body modification)</td><td style="text-align:center"><code>th:text</code><br><code>th:utext</code></td><td style="text-align:center">文本</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Fragment specification</td><td style="text-align:center"><code>th:fragment</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">Fragment removal</td><td style="text-align:center"><code>th:remove</code></td></tr></tbody></table><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="标准HTML注释"><a href="#标准HTML注释" class="headerlink" title="标准HTML注释"></a>标准HTML注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Thymeleaf-解析器级注释块"><a href="#Thymeleaf-解析器级注释块" class="headerlink" title="Thymeleaf 解析器级注释块"></a>Thymeleaf 解析器级注释块</h3><blockquote><p>删除<code>&lt;!--/*--&gt;</code>和<code>&lt;!--*/--&gt;</code>之间的所有内容。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/*--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">You can see me only before Thymeleaf processes me!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--*/--&gt;</span></span><br></pre></td></tr></table></figure><p>被注释的内容仅在静态页面中显示，当渲染时则被注释掉。</p><h3 id="原型注释块"><a href="#原型注释块" class="headerlink" title="原型注释块"></a>原型注释块</h3><p><strong>当模板静态打开时（比如原型设计），原型注释块所注释的代码将被注释，而在模板被执行时，这些被注释的代码就能被显示出来。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/*/</span></span><br><span class="line"><span class="comment">    &lt;div th:text="$&#123;...&#125;"&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">/*/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>good bye!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h2><h3 id="内联表达式"><a href="#内联表达式" class="headerlink" title="内联表达式"></a>内联表达式</h3><p><code>[[...]]</code>、<code>[(...)]</code>分别对应<code>th:text</code>与<code>th:utext</code>.</p><p><code>th:text</code>与<code>th:utext</code>的区别。</p><p>​    传入数据为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="string">"This is &lt;b&gt;great!&lt;/b&gt;"</span></span><br></pre></td></tr></table></figure><p>​    原型与渲染后效果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "[($&#123;msg&#125;)]"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">=&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>great!<span class="tag">&lt;/<span class="name">b</span>&gt;</span>"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "[[$&#123;msg&#125;]]"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">=&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "This is &amp;lt;b&amp;gt;great!&amp;lt;/b&amp;gt;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="禁用内联"><a href="#禁用内联" class="headerlink" title="禁用内联"></a>禁用内联</h3><p>有时要输出<code>[[...]]</code>等文本内容，须禁用内联表达式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"none"</span>&gt;</span></span><br><span class="line">    A double array looks like this:[[1,2,3],[4,5]]!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript内联"><a href="#JavaScript内联" class="headerlink" title="JavaScript内联"></a>JavaScript内联</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">    var username=/*[[$&#123;session.user.name&#125;]]*/"Gertrud Kiwifruit";</span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>/**/</code>原型（即静态）时为被注释状态，渲染时为传入的数据。</p></blockquote><h3 id="css内联"><a href="#css内联" class="headerlink" title="css内联"></a>css内联</h3><p>传入数据为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classname = <span class="string">'main elems'</span>;</span><br><span class="line">   align = <span class="string">'center'</span>;</span><br></pre></td></tr></table></figure><p>原型与渲染后效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .[[$&#123;classname&#125;]]&#123;</span></span><br><span class="line"><span class="undefined">        text-align:[[$&#123;align&#125;]];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">=&gt;<span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .main\ elems&#123;</span></span><br><span class="line"><span class="undefined">        text-align:center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表达式基本对象"><a href="#表达式基本对象" class="headerlink" title="表达式基本对象"></a>表达式基本对象</h2><ul><li><code>#ctx</code>: 上下文对象。是<code>org.thymeleaf.context.IContext</code>或者<code>org.thymeleaf.context.IWebContext</code>的实现。</li><li><code>#local</code>:  直接访问与<code>java.util.Locale</code>关联的当前的请求。</li></ul><h3 id="request-session等属性"><a href="#request-session等属性" class="headerlink" title="request/session等属性"></a><code>request</code>/<code>session</code>等属性</h3><ul><li><code>param</code>:  用于检索请求参数。</li><li><code>session</code>:  用于检索<code>session</code>属性。</li><li><code>application</code>:  用于检索<code>application</code>/<code>servlet</code>上下文属性。</li></ul><h3 id="Web上下文对象"><a href="#Web上下文对象" class="headerlink" title="Web上下文对象"></a>Web上下文对象</h3><ul><li><code>#request</code>:  直接访问与当前请求关联的<code>javax.servlet.http.HttpServletRequest</code>对象。</li><li><code>#session</code>:  直接访问与当前请求关联的<code>javax.servlet.http.HttpServletSession</code>对象。</li><li><code>#servletContext</code>:  直接访问与当前请求关联的<code>javax.servlet.ServletContext</code>对象。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Thymeleaf简介：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java模板引擎。&lt;/li&gt;
&lt;li&gt;自然模板，原型即页面。&lt;/li&gt;
&lt;li&gt;语法优雅易懂。&lt;/li&gt;
&lt;li&gt;遵从Web标准&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;显著
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot+Mybatis CRUD</title>
    <link href="/2018/12/14/SpringBoot+Mybatis%20CRUD/"/>
    <id>/2018/12/14/SpringBoot+Mybatis CRUD/</id>
    <published>2018-12-14T06:35:00.000Z</published>
    <updated>2019-04-28T21:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用eclipse新建maven工程（simple-project）"><a href="#用eclipse新建maven工程（simple-project）" class="headerlink" title="用eclipse新建maven工程（simple project）"></a>用eclipse新建maven工程（simple project）</h1><h2 id="hello-springboot"><a href="#hello-springboot" class="headerlink" title="hello springboot!"></a>hello springboot!</h2><h3 id="1-修改pom-xml如下："><a href="#1-修改pom-xml如下：" class="headerlink" title="1.修改pom.xml如下："></a>1.修改<code>pom.xml</code>如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;demo&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="2-在src-main-java下建立com-example-demo包"><a href="#2-在src-main-java下建立com-example-demo包" class="headerlink" title="2.在src/main/java下建立com.example.demo包"></a><strong>2</strong>.在<code>src/main/java</code>下建立com.example.demo包</h3><p>建立DemoApplication类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开发任何一个Spring Boot项目，都会用到这样的被<code>@SpringBootApplication</code>注解的启动类，<code>@SpringBootApplication</code>注解是Spring Boot的核心注解，它是一个组合注解。（<a href="https://mp.weixin.qq.com/s/1yHtaoSqqIJItIXByvV5QA" target="_blank" rel="noopener">springboot的启动</a>）</p><h3 id="3-在src-main-java下建立com-example-demo-web包"><a href="#3-在src-main-java下建立com-example-demo-web包" class="headerlink" title="3.在src/main/java下建立com.example.demo.web包"></a><strong>3</strong>.在<code>src/main/java</code>下建立com.example.demo.web包</h3><p>建立HelloController类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.web;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"> </span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;hello springboot!&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建包时==注意==：<br>被<code>@SpringBootApplication</code>注解的启动类DemoApplication 所在的包要是父级包，HelloController要在它子包内才行<br><span id="目录树">例子：</span></p><pre><code>com   +- example       +- demo           +- DemoApplication.java           |           +- pojo           |   +- Category.java           |           +- mapper           |   +- CategoryMapper.java           |           +- web               +- HelloController.java  </code></pre><p>此时运行DemoApplication.java，出现</p><pre><code>  .   ____          _            __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &apos;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.6.RELEASE)</code></pre><p>且访问<code>http://localhost:8080/hello</code>能出现<code>hello springboot!</code>。</p><h2 id="调用Mybatis"><a href="#调用Mybatis" class="headerlink" title="调用Mybatis"></a>调用Mybatis</h2><h3 id="1-在pom-xml里加入相关包："><a href="#1-在pom-xml里加入相关包：" class="headerlink" title="1.在pom.xml里加入相关包："></a><strong>1</strong>.在<code>pom.xml</code>里加入相关包：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- servlet依赖. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- tomcat的支持. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mysql --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-在src-main-resources下建立application-properties配置文件："><a href="#2-在src-main-resources下建立application-properties配置文件：" class="headerlink" title="2.在src/main/resources下建立application.properties配置文件："></a><strong>2</strong>.在<code>src/main/resources</code>下建立application.properties<span id="配置文件">配置文件：</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=admin</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><h3 id="3-按上述目录树建包和类"><a href="#3-按上述目录树建包和类" class="headerlink" title="3.按上述目录树建包和类"></a><strong>3</strong>.按<a href="#目录树">上述</a>目录树建包和类</h3><p>Category.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.pojo;</span><br><span class="line"></span><br><span class="line">public class Category &#123;</span><br><span class="line">  </span><br><span class="line">    private int id;</span><br><span class="line">      </span><br><span class="line">    private String name;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CategoryMapper.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.mapper;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">import com.example.demo.pojo.Category;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface CategoryMapper &#123;</span><br><span class="line"> </span><br><span class="line">    @Select(&quot;select * from category_ &quot;)</span><br><span class="line">    List&lt;Category&gt; findAll();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-建立-jsp文件，目录在上述配置文件中已指定"><a href="#3-建立-jsp文件，目录在上述配置文件中已指定" class="headerlink" title="3.建立.jsp文件，目录在上述配置文件中已指定"></a><strong>3</strong>.建立.jsp文件，目录在上述<a href="#配置文件">配置文件</a>中已指定</h3><p>在<code>src/main/webapp/WEB-INF/jsp/</code>下建立hello.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt; </span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;   </span><br><span class="line">&lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=&quot;$&#123;cs&#125;&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt;          </span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h3 id="4-修改HelloController-java"><a href="#4-修改HelloController-java" class="headerlink" title="4.修改HelloController.java"></a><strong>4</strong>.修改HelloController.java</h3><p>将<code>@RestController</code>修改为<code>@Controller</code>，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">CategoryMapper categoryMapper;</span><br></pre></td></tr></table></figure><p>为<code>hello()</code>方法添加<code>Model m</code>参数以传输数据，修改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.web;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import com.example.demo.mapper.CategoryMapper;</span><br><span class="line">import com.example.demo.pojo.Category;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello(Model m) &#123;</span><br><span class="line">List&lt;Category&gt; cs = categoryMapper.findAll();</span><br><span class="line">m.addAttribute(&quot;cs&quot;, cs);</span><br><span class="line">return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行DemoApplication.java，出现</p><pre><code>  .   ____          _            __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &apos;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.6.RELEASE)</code></pre><p>且再次访问<code>http://localhost:8080/hello</code>就能出现表。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用eclipse新建maven工程（simple-project）&quot;&gt;&lt;a href=&quot;#用eclipse新建maven工程（simple-project）&quot; class=&quot;headerlink&quot; title=&quot;用eclipse新建maven工程（simple p
      
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SpringBoot" scheme="/tags/SpringBoot/"/>
    
      <category term="MySql" scheme="/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Java基础整理</title>
    <link href="/2018/12/07/Java%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/"/>
    <id>/2018/12/07/Java基础整理/</id>
    <published>2018-12-07T10:20:00.000Z</published>
    <updated>2019-04-29T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础整理（一）"><a href="#基础整理（一）" class="headerlink" title="基础整理（一）"></a>基础整理（一）</h1><h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1 类和对象"></a>1 类和对象</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><p>对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></blockquote><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote><p>类是一个模板，它描述一类对象的行为和状态。</p></blockquote><h2 id="2-基本特征"><a href="#2-基本特征" class="headerlink" title="2 基本特征"></a>2 基本特征</h2><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>多态是允许你将父对象设置成为一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。</p></blockquote><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parent</span> //父类接口</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleCall</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child_A</span> <span class="keyword">implements</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleCall</span><span class="params">()</span></span>;</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="comment">//具体的实现细节；</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child_B</span> <span class="keyword">implements</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleCall</span><span class="params">()</span></span>;</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="comment">//具体的实现细节；</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们就可以看到多态所展示的特性了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent pa = <span class="keyword">new</span> Child_A();</span><br></pre></td></tr></table></figure><p><code>pa.simpleCall()</code>则显然是调用Child_A的方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent pa = <span class="keyword">new</span> Child_B();</span><br></pre></td></tr></table></figure><p><code>pa.simpleCall()</code>则是在调用<code>Child_B</code>的方法。所以，我们对于抽象的父类或者接口给出了我们的具体实现后，<code>pa</code> 可以完全不用管实现的细节，只访问我们定义的方法，就可以了。</p><p>事实上，这就是多态所起的作用，可以实现<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC" target="_blank" rel="noopener">控制反转</a>。这在大量的J2EE<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">轻量级框架</a>中被用到，比如<a href="https://baike.baidu.com/item/Spring/85061" target="_blank" rel="noopener">Spring</a>的依赖注入机制。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>继承可以使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。</p></blockquote><p>用<code>extends</code>关键字来继承父类。</p><ol><li><p>子类拥有父类得特征，而父类没有，父类更通用，子类更具体，（特征包括属性和方法，自身的特性，拥有父类没有的）</p></li><li><p>使用extends继承父类，语句格式：<code>class 子类名 extends 父类名{}</code></p></li><li><p>父类中一般只定义一般属性和方法（这个一般可以理解为是子类共有的，这就是父类更通用，而子类拥有其他的，所以子类更具体）</p></li><li><p>子类中通过<code>super</code>关键字来调用父==构造方法==</p></li><li><p>在子类中可以继承父类得那些东西，==哪些不可以继承?==<br>父类中<code>public</code>，<code>protected</code>修饰的属性，方法可以继承，==<code>private</code>修饰的属性和方法不能被继承==</p></li><li><p>规则： 创建子类对象的时候，首先调用的是父类的无参构造方法创建一个父类对象</p></li><li><p>可以在子类中显示调用父类的有参构造方法</p></li><li><p>如果父类的属性均为<code>private</code>修饰，则可以通过共有(<code>public</code>)的<code>getter</code>，<code>setter</code>方法来调用</p><p>可以利用<a href="https://baike.baidu.com/item/%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">接口</a>来实现与多重继承相似的效果。</p></li></ol><p><strong>关键词：</strong><code>extends</code></p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是==指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。==<br>封装可以被认为是一个==保护屏障==，==防止该类的代码和数据被外部类定义的代码随机访问。==<br>要访问该类的代码和数据，必须通过严格的接口控制。<br>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。<br>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p></blockquote><p><strong>优点：</strong></p><ol><li><p>良好的封装能够减少==耦合==。</p></li><li><p>类内部的结构可以自由修改。</p></li><li><p>可以对成员变量进行更精确的控制。</p></li><li><p>隐藏信息，实现细节。</p></li></ol><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</span></span><br></pre></td></tr></table></figure><p> <code>name</code>和 <code>age</code> 属性设置为私有的<code>(private)</code>，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏如果要访问就要通过公共的方法<code>(public)</code></p><p><strong>关键词：</strong><code>private</code></p><h2 id="3-实例和方法"><a href="#3-实例和方法" class="headerlink" title="3 实例和方法"></a>3 实例和方法</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>对象就是类的实例。</p></blockquote><p><strong>创建对象实例的四种方式</strong></p><ol><li>使用new关键字</li><li>利用java的放射机制</li><li>实现Cloneable接口使用克隆方法</li><li>利用java序列化和反序列化实现创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.<span class="keyword">module</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String addr;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String u,<span class="keyword">int</span> a,String addr)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = u;</span><br><span class="line"><span class="keyword">this</span>.age = a;</span><br><span class="line"><span class="keyword">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [userName="</span> + userName + <span class="string">", age="</span> + age + <span class="string">", addr="</span> + addr + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象方式1:使用new关键字</span></span><br><span class="line">User u1 = <span class="keyword">new</span> User(<span class="string">"1"</span>,<span class="number">2</span>,<span class="string">"3"</span>);</span><br><span class="line">System.err.println(u1.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象方式2:使用反射</span></span><br><span class="line"><span class="comment">//发射方式创建对象要求被创建的对象编写空构造</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User u2 = User.class.newInstance();</span><br><span class="line">System.err.println(u2.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"反射创建失败"</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用clone方法创建对象:要求被创建或者被克隆的对象实现Cloneable接口</span></span><br><span class="line"><span class="comment">//(3)是在内存上对已有对象的影印，所以不会调用构造函数 </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User u3 = (User) u1.clone();</span><br><span class="line">System.err.println(<span class="string">"u3:"</span>+u3.toString());</span><br><span class="line">System.out.println(u1==u3);<span class="comment">//false</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"克隆创建失败"</span>+e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法</span></span><br><span class="line"><span class="comment">//该方法是从文件中还原类的对象，也不会调用构造函数。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键词：</strong><code>new</code>，<code>clone()</code></p><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><ol><li><p>抽象类不能被实例化</p></li><li><p>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p></li><li><p>抽象类中的抽象方法只是声明，不包含实现过程</p></li><li><p>构造方法，类方法（用static修饰的方法）不能声明为抽象方法。</p></li><li><p>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</p></li></ol><p><strong>例：</strong>问：子抽象类继承父抽象类，必须显性调用父抽象类的显性构造器吗？</p><p>并不是说”<strong>一定要调用父类的显性构造器</strong>“，而是子类在继承父类时，如果父类的显式构造器中有参数，子类要声明给出这个参数。这是一个关于==继承==的问题。</p><p><strong>关键词：</strong><code>abstract</code></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    <span class="comment">/*修饰符：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</span></span><br><span class="line"><span class="comment">     *方法体：方法体包含具体的语句，定义该方法的功能。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用</strong></p><blockquote><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p><ol><li>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。当方法==返回一个值==的时候，方法调用通常被当做一个值。</li><li>如果方法返回值是void，方法调用一定是==一条语句==。</li></ol></blockquote><p><strong>构造方法</strong></p><blockquote><p>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</p></blockquote><blockquote><p>当创建对象时，系统会自动调用构造方法</p><ol><li>没有自定义构造方法时，系统会调用默认构造方法</li><li>构造方法可以==重载==，不同的构造方法名字相同，参数列表不同，参数列表是其识别的依据、标志，类似不同人可能有相同的名字，但有不同的身份证号。</li><li>当自定义构造方法时，系统依据传入的==参数类型、数量==，自动匹配构造方法初始化对象</li></ol></blockquote><p><strong>变量作用域</strong></p><blockquote><ul><li>变量的范围是程序中该变量可以被引用的部分。</li><li>方法内定义的变量被称为局部变量。</li><li>局部变量的作用范围从声明开始，直到包含它的块结束。</li><li>局部变量必须声明才可以使用。</li></ul></blockquote><p><img src="http://www.runoob.com/wp-content/uploads/2013/12/12-130Q1221013F0.jpg" alt="作用域"></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><blockquote><ul><li><p>一个类的两个方法拥有相同的名字，但是有不同的参数列表。Java编译器会根据方法签名判断哪个方法应该被调用。</p></li><li><p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p></li><li><p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法</p></li></ul></blockquote><p><strong>重载与覆写</strong></p><table><thead><tr><th style="text-align:center">区别</th><th style="text-align:center">重载(overload)</th><th style="text-align:center">覆写(override)</th></tr></thead><tbody><tr><td style="text-align:center"><strong>概念</strong></td><td style="text-align:center">方法名称相同，参数的类型和个数不同</td><td style="text-align:center">方法名称、返回值类型、参数的类型及个数完全相同</td></tr><tr><td style="text-align:center"><strong>范围</strong></td><td style="text-align:center">一个类</td><td style="text-align:center">继承关系</td></tr><tr><td style="text-align:center"><strong>限制</strong></td><td style="text-align:center">没有权限要求</td><td style="text-align:center">被覆写的方法不能拥有比父类更严格的访问控制权限</td></tr></tbody></table><blockquote><p>重载时最好保持方法返回类型一致</p></blockquote><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h3><blockquote><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 在这里终结代码</span></span><br><span class="line">&#125;<span class="comment">//关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</span></span><br></pre></td></tr></table></figure><h2 id="4-static和final"><a href="#4-static和final" class="headerlink" title="4 static和final"></a>4 static和final</h2><h3 id="public-static-void-main-String-args"><a href="#public-static-void-main-String-args" class="headerlink" title="public static void main(String[] args) {}"></a><code>public static void main(String[] args) {}</code></h3><p><code>main</code>为程序入口。</p><p><code>String[] args</code>为命令行参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLine</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++)&#123;</span><br><span class="line">         System.out.println(<span class="string">"args["</span> + i + <span class="string">"]: "</span> + args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在命令行编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ javac CommandLine.java </span><br><span class="line">$ java CommandLine this is a command line 200 -100</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">args[0]: this</span><br><span class="line">args[1]: is</span><br><span class="line">args[2]: a</span><br><span class="line">args[3]: command</span><br><span class="line">args[4]: line</span><br><span class="line">args[5]: 200</span><br><span class="line">args[6]: -100</span><br></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a><code>static</code></h3><blockquote><p>“static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。”</p></blockquote><p>==方便在没有创建对象的情况下来进行调用（方法/变量）。==</p><p>被static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。<br>static可以用来修饰类的成员方法、类的成员变量，另外可以编写static代码块来优化程序性能。</p><p><strong>static方法</strong></p><p><img src="https://images0.cnblogs.com/i/288799/201406/201612439117678.jpg" alt></p><p>此时<code>MyObject</code>对象都没有，<code>str2</code>根本就不存在，所以就会产生矛盾了。同样对于方法也是一样，由于你无法预知在<code>print1</code>方法中是否访问了非静态成员变量，所以也==禁止在静态成员方法中访问非静态成员方法==。</p><p>而对于非静态成员方法，它访问静态成员方法/变量显然是毫无限制的。</p><p>关于构造器是否是static方法可参考：<a href="http://blog.csdn.net/qq_17864929/article/details/48006835" target="_blank" rel="noopener">http://blog.csdn.net/qq_17864929/article/details/48006835</a></p><p><strong>static变量</strong></p><blockquote><p>static变量也称作静态变量，静态变量和非静态变量的区别是：==静态变量被所有的对象所共享，在内存中只有一个副本==，它当且==仅==当在类==初次加载==时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</p><p>static成员变量的初始化顺序按照定义的顺序进行初始化。</p></blockquote><p><strong>static代码块</strong></p><blockquote><p>static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，==并且只会执行一次==。</p></blockquote><blockquote><p>因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p></blockquote><p><strong>static关键字的误区</strong></p><ol><li>static关键字会改变类中成员的访问权限吗？</li></ol><p>不会</p><ol start="2"><li>能通过this访问静态成员变量吗？</li></ol><p>能。静态成员变量虽然独立于对象，但是不代表不可以通过对象去访问，所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</p><ol start="3"><li>static能作用于局部变量么？</li></ol><p>==static是不允许用来修饰局部变量。==</p><p><strong>这段代码的输出结果是什么？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test static 1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test static 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test static 1</span><br><span class="line">test static 2</span><br></pre></td></tr></table></figure><p>虽然在main方法中没有任何语句，但是还是会输出。</p><p>执行main方法之前，必须先加载Test类，而在加载Test类的过程中就会执行static块。</p><p>另外，static块可以出现类中的任何地方（==只要不是方法内部，记住，任何方法内部都不行==），并且执行是按照static块的顺序执行的。</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a><code>final</code></h3><p><strong>final 变量：</strong></p><blockquote><p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p></blockquote><p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;   </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">10</span>;   </span><br><span class="line">    <span class="comment">// 下面是声明常量的实例   </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOXWIDTH = <span class="number">6</span>;   </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"Manager"</span>;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">()</span></span>&#123;      </span><br><span class="line">        value = <span class="number">12</span>; <span class="comment">//将输出一个错误   </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>final 方法：</strong></p><p>类中的 final 方法可以被子类继承，但是不能被子类修改。</p><p>声明 final 方法的主要目的是防止该方法的内容被修改。</p><p>如下所示，使用 final 修饰符声明方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="comment">// 方法体     </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>final 类：</strong></p><p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p><h3 id="使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"><a href="#使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？" class="headerlink" title="使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"></a>使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h3><p>使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。<br>例如，对于如下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StringBuffer a=<span class="keyword">new</span> StringBuffer(<span class="string">"immutable"</span>);</span><br></pre></td></tr></table></figure><p> 执行如下语句将报告编译期错误：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br></pre></td></tr></table></figure></p><p> 但是，执行如下语句则可以通过编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.append(<span class="string">" broken!"</span>);</span><br></pre></td></tr></table></figure><p>有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publicvoid <span class="title">method</span><span class="params">(<span class="keyword">final</span>  StringBuffer  param)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，这是办不到的，在该方法内部仍然可以增加如下代码来修改参数对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param.append(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure><h2 id="5-权限修饰符"><a href="#5-权限修饰符" class="headerlink" title="5 权限修饰符"></a>5 权限修饰符</h2><table><thead><tr><th style="text-align:center">作用域</th><th style="text-align:center">当前类</th><th style="text-align:center">同一package</th><th style="text-align:center">子孙类</th><th style="text-align:center">其他package</th></tr></thead><tbody><tr><td style="text-align:center"><code>public</code></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center"><code>protected</code></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center"><code>friendly</code></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center"><code>private</code></td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p><br><br><code>friendly</code>为默认权限。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础整理（一）&quot;&gt;&lt;a href=&quot;#基础整理（一）&quot; class=&quot;headerlink&quot; title=&quot;基础整理（一）&quot;&gt;&lt;/a&gt;基础整理（一）&lt;/h1&gt;&lt;h2 id=&quot;1-类和对象&quot;&gt;&lt;a href=&quot;#1-类和对象&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="基础" scheme="/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Html基本语法</title>
    <link href="/2018/12/07/Html%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>/2018/12/07/Html基本语法/</id>
    <published>2018-12-07T10:15:00.000Z</published>
    <updated>2019-04-29T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Html基础"><a href="#Html基础" class="headerlink" title="Html基础"></a>Html基础</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>...<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;head&gt;</code>用于定义文档头部，它是所有头部元素的容器。头部元素有<code>&lt;title&gt;</code> <code>&lt;script&gt;</code> <code>&lt;style&gt;</code> <code>&lt;link&gt;</code> <code>&lt;mate&gt;</code>等标签。</p></li><li><p><code>&lt;body&gt;&lt;/body&gt;</code> 之间是网页的主要内容，如 <code>&lt;h1&gt;</code> <code>&lt;p&gt;</code> <code>&lt;a&gt;</code> <code>&lt;img&gt;</code>等网页内容标签，这里的标签是将在浏览器中显示出来的。</p></li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本 斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>强调文本 粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">3.<span class="tag">&lt;<span class="name">q</span>&gt;</span>引用文本 显示效果为加上" "<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>长文本引用 显示效果为前后缩进<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">4.<span class="tag">&lt;<span class="name">span</span>&gt;</span>标记文本 被标记的文本可以用css和js进行操作<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">5.|html4.01 |xhtml1.0 | 作 用  |</span><br><span class="line">| <span class="tag">&lt;<span class="name">br</span>&gt;</span>    | <span class="tag">&lt;<span class="name">br</span>/&gt;</span>   | 换行符 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">hr</span>&gt;</span>    | <span class="tag">&lt;<span class="name">hr</span>/&gt;</span>   | 水平线 |</span><br><span class="line">一般用xhtml1.0版的</span><br><span class="line">6. ；为空格</span><br><span class="line">7.<span class="tag">&lt;<span class="name">address</span>&gt;</span>地址信息 默认为斜体<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>代码片段<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>代码块 即保留空格和换行符的格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">8.<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">9.<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">10.<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id以区分不同的块"</span>&gt;</span>独立的逻辑部分，会在末尾添加一个换行符<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://img.mukewang.com/52d38d7b00017fb804800357.jpg" alt><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">11.<span class="tag">&lt;<span class="name">table</span> <span class="attr">summary</span>=<span class="string">"表格简介文本"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题文本<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!--按结构一块块的显示，不在等整个表格加载完后显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--表格的一行，所以有几对tr 表格就有几行--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">12. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"目标网址"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"鼠标滑过显示的文本"</span>&gt;</span>链接显示的文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- target="_blank"是在新窗口打开的作用 --&gt;</span></span><br><span class="line">13. <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图片地址"</span> <span class="attr">alt</span>=<span class="string">"下载失败时的替换文本"</span> <span class="attr">title</span>=<span class="string">"提示文本"</span> &gt;</span></span><br><span class="line">14.表单</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"传送方式get post"</span> <span class="attr">action</span>=<span class="string">"服务器文件"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        1.<span class="tag">&lt;<span class="name">form</span>&gt;</span>成对出现，以<span class="tag">&lt;/<span class="name">form</span>&gt;</span>结束</span><br><span class="line">        2.action ：输入的数据被传送到的地方</span><br><span class="line">        3.method ：数据传送的方式(get/post)</span><br><span class="line">        4.以下均出现在表单里</span><br><span class="line">选框：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>   <span class="attr">type</span>=<span class="string">"radio/checkbox"</span>   <span class="attr">value</span>=<span class="string">"值"</span>    <span class="attr">name</span>=<span class="string">"名称"</span>   <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span></span><br><span class="line">        1.type: "radio"为单选框，"checkbox"为复选框</span><br><span class="line">        2.value：提交数据到服务器的值（后台程序使用）</span><br><span class="line">        3.name：为控件命名，以备后台程序 ASP、PHP 使用[同一组的单选按钮，name 取值一定要一致]</span><br><span class="line">        4.checked：当设置 checked="checked" 时，该选项被默认选中</span><br><span class="line">下拉列表：</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- multiple="multiple"为多选状态 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"向服务器提交的值1"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>显示的值1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- selected="selected"为默认选中的选项 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"向服务器提交的值2"</span>&gt;</span>显示的值2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">提交按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line">        - type ：为submit时，才有提交作用</span><br><span class="line">                 为reset时，为重置按钮</span><br><span class="line">label标签：</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"male"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"female"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        - 语法 ：<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"控件id名称"</span>&gt;</span>选中这段文本时会选中id名相同的控件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Html基础&quot;&gt;&lt;a href=&quot;#Html基础&quot; class=&quot;headerlink&quot; title=&quot;Html基础&quot;&gt;&lt;/a&gt;Html基础&lt;/h1&gt;&lt;h2 id=&quot;基本结构&quot;&gt;&lt;a href=&quot;#基本结构&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
      <category term="基础" scheme="/categories/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="前端" scheme="/categories/%E5%9F%BA%E7%A1%80/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="/tags/html/"/>
    
  </entry>
  
</feed>
